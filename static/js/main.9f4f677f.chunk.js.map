{"version":3,"sources":["components/ImageDetail.tsx","context/dispatch-context.tsx","containers/ImageDetail.tsx","components/Upload/Upload.tsx","containers/Upload/Upload.tsx","components/common/menubar/MenuBar.tsx","components/ImageList.tsx","hooks/use-images.ts","containers/ImageList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["styleCard","css","maxWidth","styleAvatar","backgroundColor","styleMedia","height","paddingTop","ImageDetail","open","onClose","postImage","onDelete","image","React","useState","anchorEl","setAnchorEl","Dialog","aria-labelledby","fullWidth","Card","CardHeader","avatar","Avatar","aria-label","id","action","IconButton","onClick","event","currentTarget","Menu","keepMounted","Boolean","MenuItem","title","subheader","user","name","CardMedia","url","CardContent","Typography","variant","color","component","caption","dispatchContext","createContext","proc","setIsProc","ImageDetailContainer","ctx","useContext","a","data","postId","postUrl","axios","delete","load","stylePaper","alignItems","display","flexDirection","styleForm","marginTop","width","styleSubmit","margin","styleInput","Upload","onChangeTitle","onChangeCaption","onChangeFile","onSubmit","uploadFile","handleChangeTitle","useCallback","e","value","handleChangeCaption","handleChangeFile","target","files","handleSubmit","DialogContent","noValidate","accept","type","onChange","htmlFor","Button","fileName","TextField","required","label","inputProps","maxLength","multiline","rows","UploadContainer","setUploadFile","setTitle","setCaption","upFile","setUpFile","undefined","formData","FormData","append","post","upload","styleRoot","flexGrow","styleTitle","MenuBar","UploadVisible","setUploadVisible","handleClickUpload","handleCloseUploadDialog","AppBar","position","Toolbar","noWrap","edge","fontSize","flexWrap","justifyContent","overflow","styleGridList","cursor","ImageList","images","BarVisible","setBarVisible","setPostImage","ImageDetailDialogVisible","setImageDetailDialogVisible","handleClickInfo","find","Number","dataset","handleCloseImageDetailDialog","handleOnMouseEnter","handleOnMouseLeave","GridList","cellHeight","cols","map","GridListTile","key","data-id","data-url","onMouseEnter","onMouseLeave","src","alt","GridListTileBar","subtitle","useImages","dispatch","setImages","useEffect","get","result","ImageListContainer","App","setProc","current","useProc","Provider","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f4f677f.chunk.js","sourcesContent":["/** @jsxFrag React.Fragment */\nimport React, { FC } from 'react';\nimport {\n  Dialog,\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  Menu,\n  MenuItem,\n  Avatar,\n  IconButton,\n  Typography,\n} from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Image } from 'services/models/image';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst styleCard = css({\n  maxWidth: '800',\n});\n\nconst styleAvatar = css({\n  backgroundColor: 'red',\n});\n\nconst styleMedia = css({\n  height: 0,\n  paddingTop: '56.25%',\n});\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  postImage: Image | undefined;\n  onDelete: () => void;\n};\n\nexport const ImageDetail: FC<Props> = ({\n  open,\n  onClose,\n  postImage,\n  onDelete,\n}) => {\n  const image = postImage;\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"form-dialog-title\"\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        {!image ? (\n          <span>データがありません。</span>\n        ) : (\n          <Card css={styleCard}>\n            <CardHeader\n              avatar={\n                <Avatar aria-label=\"recipe\" css={styleAvatar}>\n                  {image.id}\n                </Avatar>\n              }\n              action={\n                <>\n                  <IconButton aria-label=\"settings\" onClick={handleClick}>\n                    <MoreVertIcon />\n                  </IconButton>\n                  <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                  >\n                    <MenuItem onClick={onDelete}>削除</MenuItem>\n                  </Menu>\n                </>\n              }\n              title={image.title}\n              subheader={image.user.name}\n            />\n            <CardMedia\n              css={styleMedia}\n              image={`http://localhost:3001/images/${image.url}`}\n              title=\"image\"\n            />\n            <CardContent>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {image.caption}\n              </Typography>\n            </CardContent>\n          </Card>\n        )}\n      </Dialog>\n    </>\n  );\n};\n","import { createContext, useCallback, useState } from 'react';\n\n// set context type\ntype ImageContext = {\n  proc: boolean;\n  setIsProc: (isProc: boolean) => void;\n};\n\n// context default value\nconst defaultContext: ImageContext = {\n  proc: false,\n  // 初期値を作成するが、eslintに引っかかる\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setIsProc: () => {},\n};\n\n// context object\nexport const dispatchContext = createContext<ImageContext>(defaultContext);\n\n// custom Hook\nexport const useProc = (): ImageContext => {\n  // state名はImageContext typeのプロパティに合わせる。\n  const [proc, setProc] = useState(false);\n  // 関数名はImageContext typeのプロパティに合わせる。\n  const setIsProc = useCallback((current: boolean): void => {\n    setProc(current);\n  }, []);\n\n  return {\n    proc,\n    setIsProc,\n  };\n};\n","import React, { FC, useContext } from 'react';\nimport axios from 'axios';\nimport { ImageDetail } from 'components/ImageDetail';\nimport { Image } from 'services/models/image';\nimport { dispatchContext } from 'context/dispatch-context';\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  postImage: Image | undefined;\n};\n\nconst ImageDetailContainer: FC<Props> = ({ open, onClose, postImage }) => {\n  const ctx = useContext(dispatchContext);\n\n  const onDelete = () => {\n    if (postImage && postImage.id !== null) {\n      const load = async () => {\n        try {\n          const data = {\n            postId: postImage.id,\n            postUrl: postImage.url,\n          };\n\n          await axios.delete('http://localhost:3001/api/photo/delete', {\n            data,\n          });\n          ctx.setIsProc(!ctx.proc);\n          onClose();\n        } catch (err) {\n          // console.log(err);\n        }\n      };\n\n      load();\n    }\n  };\n\n  return postImage ? (\n    <ImageDetail\n      open={open}\n      onClose={onClose}\n      postImage={postImage}\n      onDelete={onDelete}\n    />\n  ) : (\n    <div />\n  );\n};\n\nexport default ImageDetailContainer;\n","/** @jsx jsx */\nimport React, { FC } from 'react';\nimport {\n  Button,\n  TextField,\n  Dialog,\n  DialogContent,\n  Typography,\n} from '@material-ui/core';\nimport { jsx, css } from '@emotion/core';\n\nconst stylePaper = css({\n  alignItems: 'center',\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nconst styleForm = css({\n  marginTop: '8px',\n  width: '100%',\n});\n\nconst styleSubmit = css({\n  margin: '24px 0 16px 0',\n});\n\nconst styleInput = css({\n  display: 'none',\n});\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  onChangeTitle: (value: string) => void;\n  onChangeCaption: (value: string) => void;\n  onChangeFile: (files: FileList | null) => void;\n  onSubmit: () => void;\n  uploadFile: {\n    fileName: string;\n  };\n};\n\nexport const Upload: FC<Props> = ({\n  open,\n  onClose,\n  onChangeTitle,\n  onChangeCaption,\n  onChangeFile,\n  onSubmit,\n  uploadFile,\n}) => {\n  const handleChangeTitle = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) =>\n      onChangeTitle && onChangeTitle(e.currentTarget.value),\n    [onChangeTitle],\n  );\n\n  const handleChangeCaption = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) =>\n      onChangeCaption && onChangeCaption(e.currentTarget.value),\n    [onChangeCaption],\n  );\n\n  const handleChangeFile = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) =>\n      onChangeFile && onChangeFile(e.target.files),\n    [onChangeFile],\n  );\n\n  const handleSubmit = React.useCallback(() => onSubmit && onSubmit(), [\n    onSubmit,\n  ]);\n\n  return (\n    <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n      <DialogContent>\n        <div css={stylePaper}>\n          <Typography component=\"h2\" variant=\"h6\">\n            ファイルアップロード\n          </Typography>\n          <form css={styleForm} noValidate>\n            <input\n              accept=\"image/*\"\n              css={styleInput}\n              id=\"contained-button-file\"\n              type=\"file\"\n              onChange={handleChangeFile}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button variant=\"contained\" color=\"default\" component=\"span\">\n                ファイルを選択\n              </Button>\n            </label>\n            <Typography variant=\"caption\">{uploadFile.fileName}</Typography>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"title\"\n              label=\"タイトル\"\n              name=\"title\"\n              inputProps={{\n                maxLength: 20,\n              }}\n              onChange={handleChangeTitle}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              multiline\n              rows={4}\n              id=\"caption\"\n              label=\"写真の説明\"\n              name=\"caption\"\n              inputProps={{\n                maxLength: 200,\n              }}\n              onChange={handleChangeCaption}\n            />\n\n            <Button\n              type=\"button\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              css={styleSubmit}\n              onClick={handleSubmit}\n            >\n              アップロード\n            </Button>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","import React, { FC, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { Upload } from 'components/Upload/Upload';\nimport { dispatchContext } from 'context/dispatch-context';\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n};\n\nexport const UploadContainer: FC<Props> = ({ open, onClose }) => {\n  const [uploadFile, setUploadFile] = useState({ fileName: '' });\n  const [title, setTitle] = useState<string>('');\n  const [caption, setCaption] = useState<string>('');\n  const [upFile, setUpFile] = useState<File | null>();\n  const ctx = useContext(dispatchContext);\n\n  const onChangeTitle = (value: string) => {\n    setTitle(value);\n  };\n\n  const onChangeCaption = (value: string) => {\n    setCaption(value);\n  };\n\n  const onChangeFile = (files: FileList | null) => {\n    if (files !== null) {\n      setUpFile(files[0]);\n      setUploadFile({ fileName: files[0].name });\n    }\n  };\n\n  const onSubmit = () => {\n    if (upFile !== null && upFile !== undefined) {\n      setUploadFile({ fileName: upFile.name });\n\n      const upload = async () => {\n        try {\n          const formData = new FormData();\n          formData.append('image', upFile);\n          await axios.post(\n            'http://localhost:3001/api/photo/uploadtest',\n            formData,\n          );\n\n          const url = uploadFile.fileName;\n          const data = {\n            url,\n            title,\n            caption,\n          };\n\n          await axios.post('http://localhost:3001/api/photo/upload', data);\n          ctx.setIsProc(!ctx.proc);\n          setUploadFile({ fileName: '' });\n          onClose();\n        } catch (err) {\n          // console.log(err);\n        }\n      };\n\n      upload();\n    }\n  };\n\n  return (\n    <Upload\n      open={open}\n      onClose={onClose}\n      onChangeTitle={onChangeTitle}\n      onChangeCaption={onChangeCaption}\n      onChangeFile={onChangeFile}\n      onSubmit={onSubmit}\n      uploadFile={uploadFile}\n    />\n  );\n};\n","/** @jsx jsx */\nimport React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { UploadContainer } from 'containers/Upload/Upload';\nimport { jsx, css } from '@emotion/core';\n\nconst styleRoot = css({\n  flexGrow: 1,\n});\n\nconst styleTitle = css`\n\n  display: none;\n  flex-grow: 1;\n\n  @media (min-width: 600px) {\n    display: block;\n  }\n`;\n\nexport default function MenuBar() {\n  const [UploadVisible, setUploadVisible] = React.useState(false);\n\n  const handleClickUpload = React.useCallback(() => {\n    setUploadVisible(true);\n  }, []);\n\n  const handleCloseUploadDialog = React.useCallback(() => {\n    setUploadVisible(false);\n  }, []);\n\n  return (\n    <div css={styleRoot}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography css={styleTitle} variant=\"h6\" noWrap>\n            画像一覧\n          </Typography>\n          <IconButton\n            edge=\"end\"\n            color=\"inherit\"\n            aria-label=\"upload\"\n            onClick={handleClickUpload}\n          >\n            <CloudUploadIcon fontSize=\"large\" />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <UploadContainer open={UploadVisible} onClose={handleCloseUploadDialog} />\n    </div>\n  );\n}\n","import React, { FC, useCallback, useState } from 'react';\nimport { GridList, GridListTile, GridListTileBar } from '@material-ui/core';\n\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport ImageDetailContainer from 'containers/ImageDetail';\nimport MenuBar from 'components/common/menubar/MenuBar';\nimport { Image } from 'services/models/image';\n\nconst styleRoot = css({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-around',\n  overflow: 'hidden',\n  backgroundColor: 'white',\n});\n\nconst styleGridList = css({\n  width: '100%',\n  height: '100%',\n  cursor: 'pointer',\n});\n\ntype Props = {\n  images: Image[];\n};\n\nexport const ImageList: FC<Props> = ({ images }) => {\n  const [BarVisible, setBarVisible] = useState(0);\n  const [postImage, setPostImage] = useState<Image | undefined>();\n  const [ImageDetailDialogVisible, setImageDetailDialogVisible] = useState(\n    false,\n  );\n\n  const handleClickInfo = useCallback(\n    (e: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\n      const image = images.find(data => {\n        return data.id === Number(e.currentTarget.dataset.id);\n      });\n\n      setPostImage(image);\n      setImageDetailDialogVisible(true);\n    },\n    [images],\n  );\n  const handleCloseImageDetailDialog = useCallback(() => {\n    setImageDetailDialogVisible(false);\n  }, []);\n\n  const handleOnMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\n      setBarVisible(Number(e.currentTarget.dataset.id));\n    },\n    [],\n  );\n\n  const handleOnMouseLeave = useCallback(() => {\n    setBarVisible(0);\n  }, []);\n\n  return (\n    <div css={styleRoot}>\n      <MenuBar />\n      <GridList cellHeight={200} css={styleGridList} cols={4}>\n        {images.map(image => (\n          <GridListTile\n            key={image.id}\n            cols={image.cols || 1}\n            data-id={image.id}\n            data-url={image.url}\n            onClick={handleClickInfo}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseLeave={handleOnMouseLeave}\n          >\n            <img\n              src={`http://localhost:3001/images/${image.url}`}\n              alt={image.title}\n            />\n            {BarVisible === image.id && (\n              <GridListTileBar\n                title={image.title}\n                subtitle={<span>by: {image.user.name}</span>}\n              />\n            )}\n          </GridListTile>\n        ))}\n      </GridList>\n      <ImageDetailContainer\n        open={ImageDetailDialogVisible}\n        onClose={handleCloseImageDetailDialog}\n        postImage={postImage}\n      />\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Image } from 'services/models/image';\n\nconst useImages = (dispatch: boolean) => {\n  const [images, setImages] = useState<Image[]>([]);\n\n  useEffect(() => {\n    const load = async () => {\n      try {\n        const result = await axios.get<Image[]>(\n          'http://localhost:3001/api/photo/list',\n        );\n\n        setImages(result.data);\n      } catch (err) {\n        // console.log(err);\n      }\n    };\n\n    load();\n  }, [dispatch]);\n\n  return { images };\n};\n\nexport default useImages;\n","import React, { FC, useContext } from 'react';\nimport { ImageList } from 'components/ImageList';\nimport useImages from 'hooks/use-images';\nimport { dispatchContext } from 'context/dispatch-context';\n\nconst ImageListContainer: FC = () => {\n  const ctx = useContext(dispatchContext);\n  const { images } = useImages(ctx.proc);\n\n  return <ImageList images={images} />;\n};\n\nexport default ImageListContainer;\n","import React from 'react';\nimport './App.css';\nimport ImageListContainer from 'containers/ImageList';\nimport { dispatchContext, useProc } from 'context/dispatch-context';\n\nconst App = () => {\n  const ctx = useProc();\n\n  return (\n    <div>\n      <dispatchContext.Provider value={ctx}>\n        <ImageListContainer />\n      </dispatchContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}